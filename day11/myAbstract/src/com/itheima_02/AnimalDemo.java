package com.itheima_02;

/*
    测试类

    抽象类的特点：抽象类和抽象方法必须使用 abstract 关键字修饰
    抽象类中不一定有抽象方法，有抽象方法的类一定是抽象类
    抽象类不能实例化：抽象类如何实例化呢？参照多态的方式，通过子类对象实例化，
                   这叫【抽象类多态】，所以抽象类包含构造函数
    抽象类的子类：（1）要么重写抽象类中的所有抽象方法
               （2）要么是抽象类

    问题：什么是抽象？
    回答：就是不具体，看不明白的

    问题：抽象类中是否有构造函数？
    回答：有，用于给【子类】对象初始化

    问题：抽象类是否可以定义非抽象方法？
    回答：可以，其实，抽象类和一般类没有太大区别，都是在描述事物，只不过抽象类在描述事物
         时，有些功能不具体。所以抽象类和一般类在定义上，都是需要定义属性和行为，
         只不过抽象类比一般类多了一个抽象函数，而且比一般类少了一个创建对象的部分

    问题：抽象关键字abstract和那些关键字不共存？
    回答：final，private，static
         (1)abstract 修饰的类:必须被继承；abstract 修饰的方法，应被重写
         (2)final 修饰的类、属性、方法不可被更改，所以final 修饰的方法不可以被重写。
         (3)private 修饰的类只能是内部类，private 修饰的属性、方法只能在本类中调用，重写的方法无法访问这些方法和属性。
         (4)static 修饰的方法是静态的，可以直接被类所调用，但是abstract 修饰的方法抽象方法，没有方法体不能够被直接调用，需要通过类的继承或接口实现来重写抽象方法后才能使用。

    问题：抽象类中可不可以不定义抽象方法？
    回答：可以。那此类的目的仅仅为了不创建本类对象

 */
public class AnimalDemo {
    public static void main(String[] args) {
//        Animal a = new Animal();
        Animal a = new Cat();
        a.eat();
        a.sleep();
    }
}
