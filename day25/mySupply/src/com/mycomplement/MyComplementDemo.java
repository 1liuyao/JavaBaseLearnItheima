package com.mycomplement;
/*
    【原码 反码 补码】
    1、正数:（1）最左边符号位为0
           （2）反码、补码是其本身
    2、负数:（1）最左边符号位为1
           （2）负数的反码符号位不变，其余位取反
           （3）负数的补码是在其反码的基础上加1【结果跨零运算差一的问题】
    3、原码的弊端：利用原码进行计算的时候，如果是正数完全没问题
                但如果是负数计算，结果就出错，实际运算的方向，跟正确运算方向是相反的。
                例如：-3+1=-4，-3-1=-2
    4、反码出现的目的：为解决原码不能计算负数的问题而出现的
    5、反码的弊端：负数运算的时候，如果结果不跨0，是没有问题的，但是如果结果跨0，跟实际结果会有一的偏差
                例如：+0的原码为：00000000  反码为：00000000
                     -0的原码为：10000000  反码为：111111111
                由于0对应有两个不同的反码，所以通过反码做负数跨零运算，例如：-1+2时等于+0
    6、补码出现的目的：为解决负数计算时跨0的问题而出现。
    7、注意：（1）补码还能多记录一个特殊的值-128，该数据在一个字节下，没有原码和反码
          ※（2）计算机中的存储和计算都是以补码的形式进行的
 */

public class MyComplementDemo {
    public static void main(String[] args) {
        //基本数据类型自动向上转型，按照数据类型所占的字节数，在前面补0
        byte a=10;//00001010
        short b=a;//00000000 00001010
        System.out.println(b);

        //基本数据类型强制向下转型，按照数据类型所占的字节数，截取相应位数
        short c=200;//00000000 11001000
        byte d=(byte) c;//截取低8位：11001000【补码】 11000111【反码】 10111000【原码】=-56
        System.out.println(d);
    }
}
